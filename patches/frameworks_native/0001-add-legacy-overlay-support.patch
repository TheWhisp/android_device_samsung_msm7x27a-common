From 1ebf5a2505acd32af0a29989c650f374a82465ff Mon Sep 17 00:00:00 2001
From: TheWhisp <daavis.90@gmail.com>
Date: Sat, 10 Aug 2013 15:49:33 +0300
Subject: [PATCH] add legacy overlay support

Change-Id: I64041e9199ad01bafb3112ef2059fa503692baa3
---
 include/ui/legacy/Overlay.h | 103 +++++++++++++++++++++++++++++++++++
 libs/ui/Android.mk          |   3 +-
 libs/ui/legacy/Overlay.cpp  | 128 ++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 233 insertions(+), 1 deletion(-)
 create mode 100644 include/ui/legacy/Overlay.h
 create mode 100644 libs/ui/legacy/Overlay.cpp

diff --git a/include/ui/legacy/Overlay.h b/include/ui/legacy/Overlay.h
new file mode 100644
index 0000000..6647e92
--- /dev/null
+++ b/include/ui/legacy/Overlay.h
@@ -0,0 +1,103 @@
+/*
+ * Copyright (C) 2007 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef ANDROID_OVERLAY_H
+#define ANDROID_OVERLAY_H
+
+#include <stdint.h>
+#include <sys/types.h>
+
+#include <utils/Errors.h>
+#include <binder/IInterface.h>
+#include <utils/RefBase.h>
+#include <utils/threads.h>
+
+#include <ui/PixelFormat.h>
+
+typedef void (*overlay_set_fd_hook)(void *data,
+        int fd);
+typedef void (*overlay_set_crop_hook)(void *data,
+        uint32_t x, uint32_t y, uint32_t w, uint32_t h);
+typedef void (*overlay_queue_buffer_hook)(void *data,
+        void* buffer);
+
+namespace android {
+
+class IMemory;
+class IMemoryHeap;
+
+// ----------------------------------------------------------------------------
+
+class Overlay : public virtual RefBase
+{
+public:
+    Overlay(overlay_set_fd_hook set_fd,
+            overlay_set_crop_hook set_crop,
+            overlay_queue_buffer_hook queue_buffer,
+            void* data);
+
+    /* destroys this overlay */
+    void destroy();
+    
+    /* get the HAL handle for this overlay */
+    void* getHandleRef() const;
+
+    /* blocks until an overlay buffer is available and return that buffer. */
+    status_t dequeueBuffer(void** buffer);
+
+    /* release the overlay buffer and post it */
+    status_t queueBuffer(void* buffer);
+
+    /* change the width and height of the overlay */
+    status_t resizeInput(uint32_t width, uint32_t height);
+
+    status_t setCrop(uint32_t x, uint32_t y, uint32_t w, uint32_t h) ;
+
+    status_t getCrop(uint32_t* x, uint32_t* y, uint32_t* w, uint32_t* h) ;
+
+    /* set the buffer attributes */
+    status_t setParameter(int param, int value);
+    status_t setFd(int fd);
+
+    /* returns the address of a given buffer if supported, NULL otherwise. */
+    void* getBufferAddress(void* buffer);
+
+    /* get physical informations about the overlay */
+    uint32_t getWidth() const;
+    uint32_t getHeight() const;
+    int32_t getFormat() const;
+    int32_t getWidthStride() const;
+    int32_t getHeightStride() const;
+    int32_t getBufferCount() const;
+    status_t getStatus() const;
+    
+private:
+    virtual ~Overlay();
+
+    // C style hook
+    overlay_set_fd_hook set_fd_hook;
+    overlay_set_crop_hook set_crop_hook;
+    overlay_queue_buffer_hook queue_buffer_hook;
+    void* hook_data;
+
+    status_t mStatus;
+};
+
+// ----------------------------------------------------------------------------
+
+}; // namespace android
+
+#endif // ANDROID_OVERLAY_H
diff --git a/libs/ui/Android.mk b/libs/ui/Android.mk
index 5d5e082..4b16a2f 100644
--- a/libs/ui/Android.mk
+++ b/libs/ui/Android.mk
@@ -24,7 +24,8 @@ LOCAL_SRC_FILES:= \
 	PixelFormat.cpp \
 	Rect.cpp \
 	Region.cpp \
-	UiConfig.cpp
+	UiConfig.cpp \
+	legacy/Overlay.cpp
 
 LOCAL_SHARED_LIBRARIES := \
 	libcutils \
diff --git a/libs/ui/legacy/Overlay.cpp b/libs/ui/legacy/Overlay.cpp
new file mode 100644
index 0000000..bb265a4
--- /dev/null
+++ b/libs/ui/legacy/Overlay.cpp
@@ -0,0 +1,128 @@
+/*
+ * Copyright (C) 2007 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#define LOG_TAG "Overlay"
+
+#include <binder/IMemory.h>
+#include <binder/Parcel.h>
+#include <utils/Errors.h>
+#include <binder/MemoryHeapBase.h>
+
+#include <ui/legacy/Overlay.h>
+
+namespace android {
+
+Overlay::Overlay(overlay_set_fd_hook set_fd,
+        overlay_set_crop_hook set_crop,
+        overlay_queue_buffer_hook queue_buffer,
+        void *data)
+    : mStatus(NO_INIT)
+{
+    set_fd_hook = set_fd;
+    set_crop_hook = set_crop;
+    queue_buffer_hook = queue_buffer;
+    hook_data = data;
+    mStatus = NO_ERROR;
+}
+
+Overlay::~Overlay() {
+}
+
+status_t Overlay::dequeueBuffer(void** buffer)
+{
+    return mStatus;
+}
+
+status_t Overlay::queueBuffer(void* buffer)
+{
+    if (queue_buffer_hook)
+        queue_buffer_hook(hook_data, buffer);
+    return mStatus;
+}
+
+status_t Overlay::resizeInput(uint32_t width, uint32_t height)
+{
+    return mStatus;
+}
+
+status_t Overlay::setParameter(int param, int value)
+{
+    return mStatus;
+}
+
+status_t Overlay::setCrop(uint32_t x, uint32_t y, uint32_t w, uint32_t h)
+{
+    if (set_crop_hook)
+        set_crop_hook(hook_data, x, y, w, h);
+    return mStatus;
+}
+
+status_t Overlay::getCrop(uint32_t* x, uint32_t* y, uint32_t* w, uint32_t* h)
+{
+    return mStatus;
+}
+
+status_t Overlay::setFd(int fd)
+{
+    if (set_fd_hook)
+        set_fd_hook(hook_data, fd);
+    return mStatus;
+}
+
+int32_t Overlay::getBufferCount() const
+{
+    return 0;
+}
+
+void* Overlay::getBufferAddress(void* buffer)
+{
+    return 0;
+}
+
+void Overlay::destroy() {  
+}
+
+status_t Overlay::getStatus() const {
+    return mStatus;
+}
+
+void* Overlay::getHandleRef() const {
+    return 0;
+}
+
+uint32_t Overlay::getWidth() const {
+    return 0;
+}
+
+uint32_t Overlay::getHeight() const {
+    return 0;
+}
+
+int32_t Overlay::getFormat() const {
+    return 0;
+}
+
+int32_t Overlay::getWidthStride() const {
+    return 0;
+}
+
+int32_t Overlay::getHeightStride() const {
+    return 0;
+}
+
+// ----------------------------------------------------------------------------
+
+}; // namespace android
-- 
1.8.1.2

